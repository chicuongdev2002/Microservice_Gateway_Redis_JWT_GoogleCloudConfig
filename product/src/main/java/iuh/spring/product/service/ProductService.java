package iuh.spring.product.service;import iuh.spring.product.entity.Product;import iuh.spring.product.repositories.ProductRepository;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.ValueOperations;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.concurrent.TimeUnit;@Slf4j@Service@AllArgsConstructorpublic class ProductService {    private final ProductRepository productRepository;    private final RedisTemplate<String, Product> redisTemplate;    // Tìm product dựa vào id    public Product findProductById(Long id) {        final String key = "product_" + id; // Tạo khóa Redis dựa trên id        final ValueOperations<String, Product> operations = redisTemplate.opsForValue(); // Lấy thực thể ValueOperations từ redisTemplate        final boolean hasKey = redisTemplate.hasKey(key); // Kiểm tra xem khóa có tồn tại trong Redis không        if (hasKey) { // Nếu tồn tại trong Redis            final Product product = operations.get(key); // Lấy product từ Redis            log.info("ProductService.findProductById() : cache product >> " + product.toString()); // Ghi log thông tin lấy product từ Redis            return product; // Trả về product từ Redis        }        final Optional<Product> productOptional = productRepository.findById(id); // Nếu không tồn tại trong Redis, truy vấn cơ sở dữ liệu        if (productOptional.isPresent()) { // Nếu tìm thấy product trong cơ sở dữ liệu            final Product product = productOptional.get(); // Lấy product từ Optional            operations.set(key, product, 10, TimeUnit.SECONDS); // Lưu product vào Redis với thời gian sống là 10 giây            log.info("ProductService.findProductById() : cache insert >> " + product.toString()); // Ghi log thông tin lưu product vào Redis            return product; // Trả về product từ cơ sở dữ liệu        } else { // Nếu không tìm thấy product            throw new RuntimeException("Product not found"); // Ném ngoại lệ        }    }    // Lấy tất cả products    public List<Product> getAllProducts() {        return productRepository.findAll();    }    // Lưu product    public Product saveProduct(Product product) {        Product savedProduct = productRepository.save(product);        return savedProduct;    }    // Cập nhật product    public Product updateProduct(Product product) {        final String key = "product_" + product.getId();        final boolean hasKey = redisTemplate.hasKey(key);        if (hasKey) { // Nếu product tồn tại trong Redis            redisTemplate.delete(key); // Xóa product khỏi Redis            log.info("ProductService.updateProduct() : cache update >> " + product.toString()); // Ghi log thông tin cập nhật product trong Redis        }        return productRepository.save(product); // Cập nhật product trong cơ sở dữ liệu    }    // Xóa product    public void deleteProduct(Long id) {        final String key = "product_" + id;        final boolean hasKey = redisTemplate.hasKey(key);        if (hasKey) { // Nếu product tồn tại trong Redis            redisTemplate.delete(key); // Xóa product khỏi Redis            log.info("ProductService.deleteProduct() : cache delete ID >> " + id); // Ghi log thông tin xóa product khỏi Redis        }        productRepository.deleteById(id); // Xóa product trong cơ sở dữ liệu    }}