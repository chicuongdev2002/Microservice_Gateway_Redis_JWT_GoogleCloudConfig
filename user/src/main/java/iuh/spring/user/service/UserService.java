package iuh.spring.user.service;import iuh.spring.user.entity.User;import iuh.spring.user.repositories.UserRepository;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.core.ValueOperations;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.concurrent.TimeUnit;@Slf4j@Service@AllArgsConstructorpublic class UserService {    private final UserRepository userRepository;    private final RedisTemplate<String, User> redisTemplate;    // Tìm user dựa vào id    public User findUserById(Long id) {        final String key = "user_" + id; // Tạo khóa Redis dựa trên id        final ValueOperations<String, User> operations = redisTemplate.opsForValue(); // Lấy thực thể ValueOperations từ redisTemplate        final boolean hasKey = redisTemplate.hasKey(key); // Kiểm tra xem khóa có tồn tại trong Redis không        if (hasKey) { // Nếu tồn tại trong Redis            final User user = operations.get(key); // Lấy user từ Redis            log.info("UserService.findUserById() : cache user >> " + user.toString()); // Ghi log thông tin lấy user từ Redis            return user; // Trả về user từ Redis        }        final Optional<User> userOptional = userRepository.findById(id); // Nếu không tồn tại trong Redis, truy vấn cơ sở dữ liệu        if (userOptional.isPresent()) { // Nếu tìm thấy user trong cơ sở dữ liệu            final User user = userOptional.get(); // Lấy user từ Optional            operations.set(key, user, 50, TimeUnit.SECONDS); // Lưu user vào Redis với thời gian sống là 50 giây            log.info("UserService.findUserById() : cache insert >> " + user.toString()); // Ghi log thông tin lưu user vào Redis            return user; // Trả về user từ cơ sở dữ liệu        } else { // Nếu không tìm thấy user            throw new RuntimeException("User not found"); // Ném ngoại lệ        }    }    // Lấy tất cả users    public List<User> getAllUsers() {        return userRepository.findAll();    }    // Lưu user    public User saveUser(User user) {        User savedUser = userRepository.save(user);        return savedUser;    }    // Cập nhật user    public User updateUser(User user) {        final String key = "user_" + user.getId();        final boolean hasKey = redisTemplate.hasKey(key);        if (hasKey) { // Nếu user tồn tại trong Redis            redisTemplate.delete(key); // Xóa user khỏi Redis            log.info("UserService.updateUser() : cache update >> " + user.toString()); // Ghi log thông tin cập nhật user trong Redis        }        return userRepository.save(user); // Cập nhật user trong cơ sở dữ liệu    }    // Xóa user    public void deleteUser(Long id) {        final String key = "user_" + id;        final boolean hasKey = redisTemplate.hasKey(key);        if (hasKey) { // Nếu user tồn tại trong Redis            redisTemplate.delete(key); // Xóa user khỏi Redis            log.info("UserService.deleteUser() : cache delete ID >> " + id); // Ghi log thông tin xóa user khỏi Redis        }        userRepository.deleteById(id); // Xóa user trong cơ sở dữ liệu    }}